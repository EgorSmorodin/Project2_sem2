from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from states.user_states import UserStates
from keyboards.inline import main_menu, eras, time_slider, after_event, cancel, subscribe_back
from services.wikidata_client import get_historical_event
from storage.user_data import user_data, subscribers
from utils.formatters import format_era_name
import logging

router = Router()
logger = logging.getLogger(__name__)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞–∑–∞–¥" –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.callback_query(F.data.in_(["back", "cancel"]))
async def process_back(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu()
    )
    await state.set_state(UserStates.MAIN_MENU)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@router.callback_query(F.data == "help", UserStates.MAIN_MENU)
async def show_help(callback: CallbackQuery):
    help_text = (
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è:\n"
        "üìç –ò–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞\n"
        "‚è≥ –í—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n"
        "üìú –ü–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è\n"
        "üìÖ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
        "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"
    )
    await callback.message.edit_text(
        help_text,
        reply_markup=main_menu()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"
@router.callback_query(F.data == "change_city", UserStates.MAIN_MENU)
async def change_city(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=cancel()
    )
    await state.set_state(UserStates.SELECT_CITY)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —ç–ø–æ—Ö—É"
@router.callback_query(F.data == "choose_era", UserStates.MAIN_MENU)
async def choose_era(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —ç–ø–æ—Ö—É:",
        reply_markup=eras()
    )
    await state.set_state(UserStates.SELECT_ERA)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —ç–ø–æ—Ö–∏
@router.callback_query(F.data.startswith("era_"), UserStates.SELECT_ERA)
async def select_era(callback: CallbackQuery, state: FSMContext):
    era = callback.data.split('_')[1]
    user_id = callback.from_user.id

    if user_id not in user_data:
        user_data[user_id] = {}

    user_data[user_id]['era'] = era
    user_data[user_id]['shown_events'] = set()

    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —ç–ø–æ—Ö–∞: {format_era_name(era)}",
        reply_markup=main_menu()
    )
    await state.set_state(UserStates.MAIN_MENU)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"
@router.callback_query(F.data == "get_event", UserStates.MAIN_MENU)
async def get_event(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–∏–ª –±–æ—Ç–∞
    if user_id not in user_data or 'city' not in user_data[user_id]:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≥–æ—Ä–æ–¥ –∏ —ç–ø–æ—Ö—É!", show_alert=True)
        return

    event = await get_historical_event(user_id)
    await callback.message.edit_text(
        f"üìú –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ:\n\n{event}",
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=after_event()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
@router.callback_query(F.data == "subscribe", UserStates.MAIN_MENU)
async def subscribe(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–∏–ª –±–æ—Ç–∞
    if user_id not in user_data or 'city' not in user_data[user_id]:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≥–æ—Ä–æ–¥ –∏ —ç–ø–æ—Ö—É!", show_alert=True)
        return

    if user_id in subscribers:
        current_time = subscribers[user_id].get('time', '10:00')
        await callback.message.edit_text(
            "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è!\n"
            f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {current_time}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=subscribe_back()
        )
    else:
        await state.update_data(hour=10)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=time_slider(10)
        )
        await state.set_state(UserStates.SELECT_TIME)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–∞–π–¥–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
@router.callback_query(F.data.in_(["time_prev", "time_next", "time_confirm"]), UserStates.SELECT_TIME)
async def process_time_slider(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    current_hour = data.get('hour', 10)

    if callback.data == "time_prev":
        current_hour = (current_hour - 1) % 24
    elif callback.data == "time_next":
        current_hour = (current_hour + 1) % 24
    elif callback.data == "time_confirm":
        subscribers[user_id] = {
            'city': user_data[user_id]['city'],
            'era': user_data[user_id]['era'],
            'time': f"{current_hour:02d}:00"
        }
        await callback.message.edit_text(
            f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è!\n"
            f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {current_hour:02d}:00",
            reply_markup=main_menu()
        )
        await state.set_state(UserStates.MAIN_MENU)
        return

    await state.update_data(hour=current_hour)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:",
        reply_markup=time_slider(current_hour)
    )